using System.Data.SQLite;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace SnykDemoWebApp.Controllers
{
    public class VulnerabilityController : Controller
    {
        public IActionResult Index()
        {
            var vulnerabilities = new List<Vulnerability>();
            using (SQLiteConnection dbConnection =
                   new SQLiteConnection("Data Source=VulDB.sqlite;Version=3;New=False;"))
            {
                dbConnection.Open();

                var sql = "select * from vulnerabilities";
                var command = new SQLiteCommand(sql, dbConnection);
                var reader = command.ExecuteReader();

                while (reader.Read())
                {
                    string? name = Convert.ToString(reader[nameof(Vulnerability.Name)]);
                    int rank = Convert.ToInt32(reader[nameof(Vulnerability.OwaspRank)]);
                    string? description = Convert.ToString(reader[nameof(Vulnerability.Description)]);

                    vulnerabilities.Add(new Vulnerability
                        {
                            Name = name, OwaspRank = rank, Description = description
                        }
                    );
                }
            }

            return View(vulnerabilities.Count == 0 ? OwaspTopTen : vulnerabilities.OrderBy(vul => vul.OwaspRank));
        }
        
        
        

        public IActionResult InitDB()
        {
            SQLiteConnection.CreateFile("VulDB.sqlite");

            using (SQLiteConnection dbConnection = new SQLiteConnection("Data Source=VulDB.sqlite;Version=3;"))
            {
                dbConnection.Open();

                var sql = "create table vulnerabilities (Name varchar(50), OwaspRank int, Description varchar(500))";
                var command = new SQLiteCommand(sql, dbConnection);
                command.ExecuteNonQuery();
            }

            return Ok();
        }
        
        [HttpPut]
        [Route("api/update_rank")]
        public IActionResult UpdateRank([FromHeader] string vulnerability, [FromHeader] int rank)
        {
            using (SQLiteConnection dbConnection =
                   new SQLiteConnection("Data Source=VulDB.sqlite;Version=3;New=False;"))
            {
                dbConnection.Open();

                var updateCommand = new SQLiteCommand($"update vulnerabilities set OwaspRank = {rank} where Name = '{vulnerability}';", dbConnection);
                updateCommand.ExecuteNonQuery();
            }
            
            return Ok();
        }
        
        public IActionResult Explanations([FromHeader] string vulnerability)
        {
            using (var context = new SQLiteContext())
            {
                var sql = $"select * from vulnerabilities where Name='{vulnerability}'";

                var item = context.Vulnerabilities.FromSqlRaw(sql).FirstOrDefault();

                ViewBag.Name = item?.Name ?? "Title";
                ViewBag.Description = item?.Description ?? "Lorem Ipsum";
            }

            return View();
        }

        public IActionResult Fill()
        {
            using (SQLiteConnection dbConnection =
                   new SQLiteConnection("Data Source=VulDB.sqlite;Version=3;New=False;"))
            {
                dbConnection.Open();

                var dropCommand = new SQLiteCommand("delete from vulnerabilities;", dbConnection);
                dropCommand.ExecuteNonQuery();

                foreach (var vulnerability in OwaspTopTen)
                {
                    var sql =
                        $"insert into vulnerabilities (Name, OwaspRank, Description) values ('{vulnerability.Name}',{vulnerability.OwaspRank},'{vulnerability.Description}')";

                    var command = new SQLiteCommand(sql, dbConnection);
                    command.ExecuteNonQuery();
                }
            }

            return Ok();
        }

        public IList<Vulnerability> OwaspTopTen = new List<Vulnerability>()
        {
            new()
            {
                Name = "Broken Access Control", OwaspRank = 1,
                Description =
                    "Website security access controls should limit visitor access to only those pages or sections needed by that type of user. For example, administrators of an ecommerce site need to be able to add new links or add promotions. These functions should not be accessible for other types of visitors."
            },
            new()
            {
                Name = "Cryptographic Failures", OwaspRank = 2,
                Description =
                    "Data in transit and at rest — such as passwords, credit card numbers, health records, personal information, and business secrets — require extra protection due to the potential for cryptographic failures (sensitive data exposures). "
            },
            new()
            {
                Name = "Injection", OwaspRank = 3,
                Description =
                    "Injection vulnerabilities can occur when a query or command is used to insert untrusted data into the interpreter via SQL, OS, NoSQL, or LDAP injection. The hostile data injected through this attack vector tricks the interpreter to make the application do something it was not designed for, such as generating unintended commands or accessing data without proper authentication."
            },
            new()
            {
                Name = "Insecure Design", OwaspRank = 4,
                Description =
                    "Insecure design is a wide term that encompasses a variety of flaws and is defined as “missing or poor control design.”  Threat modeling, secure design patterns, and reference architectures are among the new categories for 2021, with a demand for increasing the usage of threat modeling, safe design patterns, and reference architectures. As a community, we must move beyond “shift left” coding to pre-code tasks that are important to the Secure by Design principles."
            },
            new()
            {
                Name = "Security Misconfiguration", OwaspRank = 5,
                Description =
                    "Gartner estimates that up to 95% of cloud breaches are the result of human errors. Security setting misconfigurations are one of the prime drivers of that statistic, with OWASP noting that, of the top ten, this vulnerability is the most common. "
            },
            new()
            {
                Name = "Vulnerable and Outdated Components", OwaspRank = 6,
                Description =
                    "Modern distributed web applications often incorporate open source components such as libraries and frameworks. Any component with a known vulnerability becomes a weak link that can impact the security of the entire application."
            },
            new()
            {
                Name = "Identification and Authentication Failures", OwaspRank = 7,
                Description =
                    "When applications incorrectly execute functions related to session management or user authentication, intruders may be able to compromise passwords, security keys, or session tokens and permanently or temporarily assume the identities and permissions of other users. This vulnerability poses a grave threat to the security of the application and the resources it accesses and can also severely compromise other assets connected to the same network."
            },
            new()
            {
                Name = "Software and Data Integrity Failures", OwaspRank = 8,
                Description =
                    "Code and infrastructure that do not guard against integrity violations are referred to as software and data integrity failures. A program that uses plugins, libraries, or modules from untrusted sources, repositories, or content delivery networks (CDNs) is an example of this. Unauthorized access, malicious code, or system compromise can all be risks of an unsecured CI/CD pipeline."
            },
            new()
            {
                Name = "Security Logging and Monitoring Failures", OwaspRank = 9,
                Description =
                    "Studies indicate that the time from attack to detection can take up to 200 days, and often longer. This window gives cyber thieves plenty of time to tamper with servers, corrupt databases, steal confidential information, and plant malicious code."
            },
            new()
            {
                Name = "Server-Side Request Forgery", OwaspRank = 10,
                Description =
                    "Server-side request forgery (also termed as SSRF) is a web security flaw that allows an attacker to force a server-side application to send HTTP requests to any domain the attacker chooses. When a web application fetches a remote resource without validating the user-supplied URL, an SSRF fault occurs. Even if the program is secured by a firewall, VPN, or another sort of network access control list, an attacker can force it to send a forged request to an unexpected location."
            },
        };
    }
}